1.1. Raison sociale et activité des entreprises, triées par activités.
SELECT   raison, activité
FROM     entreprise
ORDER BY activité


1.2. Numéro des inscrits à la session CRUNGA.
SELECT inscrit
FROM   inscrire
WHERE  sess = 'CRUNGA'


1.3.
jointure implicite :

SELECT nom
FROM   inscrire I, participant P
WHERE  sess = 'CRUNGA'
   AND I.inscrit = P.inscrit

1.3 
jointure explicite:
SELECT nom
FROM   inscrire JOIN participant USING (inscrit)
WHERE  sess = 'CRUNGA'

1.3
Avec imbrication:
SELECT nom
FROM   participant
WHERE  inscrit IN (
           SELECT inscrit
           FROM   inscrire
           WHERE  sess = 'CRUNGA'
       )


1.4
SELECT nom
FROM   inscrire JOIN participant USING (inscrit)
WHERE  sess = 'CRUNGA'
   AND entr IS NULL


1.5
SELECT   DISTINCT raison
FROM     entreprise E, participant P
WHERE    E.entr = p.entr
ORDER BY raison

1.5. 
SELECT   DISTINCT raison
FROM     entreprise JOIN participant USING (entr)
ORDER BY raison


1.6. 
SELECT sess, intitulé, date_format(début, '%a %d') AS jour
FROM   session
WHERE  début BETWEEN '1984-08-01' AND '1984-08-31'



1.7

SELECT nom , date ,sess , début
FROM participant join inscrire USING (inscrit) join session USING (sess)
WHERE début=1+date

1.8
Jointure implicite :
SELECT DISTINCT a.raison , a.activité
FROM entreprise a , entreprise b
WHERE a.activité=b.activité AND a.entr!=b.entr

Jointure explicite :
SELECT DISTINCT a.raison , a.activité
FROM entreprise a join entreprise b USING(activité)
WHERE a.entr!=b.entr

REQUETE AVEC AGREGATION SANS REGROUPEMENT
2.1

SELECT ROUND(AVG(prix),2) as prixmoyen
FROM session

2.2
SELECT SUM(prix*nb_inscrits) as montants_inscriptions_1985
FROM session
WHERE début BETWEEN '1985-01-01' AND '1985-12-31'

2.3
SELECT CONCAT('(' , MIN(prime), ',' ,  MAX(prime), ')') as fourchette
FROM session
WHERE principal is not NULL


REQUETES AVEC AGREGATION ET REGROUPEMENT

3.1
SELECT durée , COUNT(sess) as sessions
FROM session
GROUP BY durée

3.2
SELECT sess , nb_inscrits , COUNT(anim) as animateurs
FROM session join animer using (sess)
GROUP BY sess

3.3
SELECT sess , nb_inscrits as valeur_renseignée , COUNT(inscrit) as valeur_calculée
FROM session join inscrire using (sess)
GROUP BY sess
HAVING valeur_renseignée != valeur_calculée

3.4
SELECT raison , COUNT(*) as inscriptions , COUNT(DISTINCT inscrit) as envoyées , SUM(prix) as montant
FROM entreprise join participant using (entr) join inscrire using (inscrit) join session using(sess)
WHERE entr IS NOT NULL
GROUP BY  raison
ORDER BY  montant DESC
LIMIT 3

3.5
SELECT DATE_FORMAT(début, "%Y") as année , count(sess) as sessions 
FROM session
GROUP BY année

3.6
SELECT DATE_FORMAT(début, "%M") as mois , ROUND(COUNT(sess)/10,2) as sessions
FROM session
GROUP BY mois
ORDER BY MONTH(début)

REQUETES AVANCEES

4.1
SELECT DISTINCT sess
FROM   inscrire
WHERE  sess NOT IN (
    SELECT sess
    FROM   inscrire A JOIN inscrire B USING (date, sess)
    WHERE  A.inscrit <> B.inscrit
)

4.2
SELECT raison
FROM entreprise LEFT JOIN participant USING (entr)
WHERE participant.entr IS NULL

4.3
EXISTS :
SELECT raison
FROM entreprise E
WHERE NOT EXISTS (
  SELECT *
  FROM participant P
  WHERE E.entr = P.entr
)

IN:
SELECT raison
FROM entreprise
WHERE entr NOT IN (
  SELECT entr
  FROM participant
  WHERE entr IS NOT NULL
)

4.4
SELECT   raison, count(*) as envoyés
FROM     ENTREPRISE JOIN PARTICIPANT USING (entr)
GROUP BY raison
HAVING   count(*) > 3

4.5
SELECT   raison, count(inscrit) as envoyés
FROM     ENTREPRISE LEFT JOIN PARTICIPANT USING (entr)
GROUP BY raison
HAVING   count(*) < 3

4.6 
1
SELECT raison , COUNT(DISTINCT inscrit) as envoyes
FROM entreprise JOIN participant using (entr)
GROUP BY raison
ORDER BY envoyes DESC
LIMIT 1

4.7
SELECT prix*nb_inscrits as inscriptions , SUM(50*heures)+prime as salaires
FROM animer JOIN session using (sess)
WHERE sess="CRUNGA"
GROUP BY sess
